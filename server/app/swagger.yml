openapi: 3.0.0

info:
  title: PizzaMeow API
  version: 0.0.0
  description: Предоставляет доступ к базовым ресурсам сервера
  
servers:
  - url: /api


# Пути, которые поддерживает API
paths:
  # ВСЕ ПУТИ СВЯЗАННЫЕ
  # С ТАБЛИЦЕЙ USER
  /users/signup:
    post:
      summary: Зарегистрировать нового пользователя по регистрационным данным (email, password) и вернуть токен доступа для зарегистрированного аккаунта
      operationId: server.app.views.users.sign_up
      requestBody:
        description: Регистрационные данные
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserSignUp'
      responses:
        '200':
          description: Новый пользователь успешно зарегистрирован
          content:
            'text/plain':
              schema:
                $ref: '#/components/schemas/Token'
        
  /users/signin:
    get:
      summary: Получить токен по регистрационным данным (email, password)
      operationId: server.app.views.users.sign_in
      parameters:
        - name: email
          description: Почта, указанная при регистрации аккаунта
          required: true
          in: query
          schema:
            type: string
        - name: password
          description: Пароль от аккаунта
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'text/plain':
              schema:
                type: string
                
  /users/config:
    patch:
      summary: Частично обновляет данные о пользователе
      operationId: server.app.views.users.update_config
      requestBody:
        description: Данные о пользователе
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserConfig'
      responses:
        '204':
          description: Данные успешно обновлены
      security:
      - jwt: []
    
  /users/change_password:
    put:
      summary: Изменяет пароль от учётной записи
      operationId: server.app.views.users.change_password
      requestBody:
        description: Новый пароль
        required: true
        content:
          'text/plain':
            schema:
              type: string
      responses:
        '204':
          description: Пароль успешно обновлён
      security:
      - jwt: []

  /users/reset_password:
    put:
      summary: Сбрасывает пароль, отправляет новый пароль на почту
      operationId: server.app.views.users.reset_password
      requestBody:
        description: Почта пользователя
        required: true
        content:
          'text/plain':
            schema:
              type: string
      responses:
        '204':
          description: Новый пароль был отправлен на вашу почту.

  /users/change_email:
    put:
      summary: Изменяет почту учётной записи
      operationId: server.app.views.users.change_email
      requestBody:
        description: Новая почта
        required: true
        content:
          'text/plain':
            schema:
              type: string
      responses:
        '204':
          description: Почта успешно обновлена
      security:
      - jwt: []

  /users/confirm_email:
    get:
      summary: Получить письмо, с ссылкой на подтверждение аккаунта
      operationId: server.app.views.users.get_confirm_email
      parameters:
        - name: email
          description: Адрес почты, на который нужно отправить письмо 
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
      - jwt: []
  /users/confirm:
    get:
      summary: Подтверждает акканут пользователя
      operationId: server.app.views.users.confirm_email
      parameters:
        - name: email_confirmation_token
          description: Токен подтверждения аккаунта
          in: query
          schema:
            type: string
      responses:
        '204':
          description: Данные успешно обновлены
  /users/delete:
    delete:
      summary: Удаляет учётную запись
      operationId: server.app.views.users.delete_user
      responses:
        '204':
          description: Учётная запись пользователя успешно удалена
      security:
      - jwt: []


  # ВСЕ ПУТИ, СВЯЗАННЫЕ
  # С ТАБЛИЦЕЙ PIZZA
  /pizzas:
    get:
      summary: Получить страницу пицц по указанным параметрам
      operationId: server.app.views.pizzas.get_pizzas_page
      parameters:
        - name: offset
          description: Число, которое нужно отступить от начала таблицы
          in: query
          schema:
            type: integer
            minimum: 0
        - name: limit
          description: Максимальное число пицц в возвращаемой странице
          in: query
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaGet'
    post:
      summary: Добавить в БД новую пиццу (только с админским доступом)
      operationId: server.app.views.pizzas.create_pizza
      requestBody:
        description: JSON объект пиццы
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PizzaPost'
      responses:
        '201':
          description: Пицца успешно добавлена в БД
      security:
      - jwt: []

  /pizzas/{id}:
    get:
      summary: Получить пиццу по id
      operationId: server.app.views.pizzas.get_pizza_by_id
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PizzaGet'
    put:
      summary: Обновить данные о существующей пицце (только с админским доступом)
      operationId: server.app.views.pizzas.update_pizza
      requestBody:
        description: JSON объект пиццы
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PizzaPut'
      responses:
        '204':
          description: Пицца успешно добавлена в БД
      security:
      - jwt: []
  
  # ВСЕ ПУТИ, СВЯЗАННЫЕ
  # С ТАБЛИЦЕЙ CART
  /carts:
    get:
      summary: Получить корзину пользователя
      operationId: server.app.views.carts.get_cart
      responses:
        '200':
          description: Корзина успешно получена
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItemGet'
      security:
      - jwt: []
    post:
      summary: Добавить объект в корзину
      operationId: server.app.views.carts.add_item_to_cart
      requestBody:
        description: JSON объект объекта корзины
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CartItemPost'
      responses:
        '204':
          description: Объект успешно добавлен в корзину
      security:
        - jwt: []
    patch:
      summary: Добавить объект в корзину
      operationId: server.app.views.carts.update_item_in_cart
      requestBody:
        description: JSON объект объекта корзины
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CartItemPatch'
      responses:
        '204':
          description: Объект корзины успешно обновлён
      security:
        - jwt: []
  /carts/{id}:
    delete:
      summary: Удалить объект из корзины
      operationId: server.app.views.carts.remove_item_from_cart
      responses:
        '200':
          description: Объект успешно удалён из корзины
      security:
        - jwt: []
    
                

# КОМПОНЕНТЫ ЗАПРОСОВ
components:
  # Схемы параметров запроса или ответа
  schemas:
    # Схема объекта корзины
    CartItemPost:
      type: object
      properties:
        pizza_id:
          type: integer
          description: id пиццы, которой соответствует этот объект
        quantity:
          type: integer
          description: Количество заказанных пицц
          minimum: 1
        size:
          type: integer
          description: Размер пиццы (0 == small, 1 == medium, 2 == large)
          minimum: 0
        dough:
          type: integer
          description: Тип теста пиццы (0 == thin, 1 == classic)
          minimum: 0
      required:
        - pizza_id
    
    CartItemPatch:
      type: object
      properties:
        item_id:
          type: integer
          description: id объекта корзины, который нужно обновить
        pizza_id:
          type: integer
          description: id пиццы, которой соответствует этот объект
        quantity:
          type: integer
          description: Количество заказанных пицц
          minimum: 1
        size:
          type: integer
          description: Размер пиццы (0 == small, 1 == medium, 2 == large)
          minimum: 0
        dough:
          type: integer
          description: Тип теста пиццы (0 == thin, 1 == classic)
          minimum: 0
      required:
        - item_id

    CartItemGet:
      type: object
      properties:
        id:
          type: integer
          description: уникальный id объекта корзины
        pizza_id:
          type: integer
          description: id пиццы, которой соответствует этот объект
        pizza_name:
          type: string
          description: Название пиццы
        total_price:
          type: number
          format: float
          description: Итоговая цена объекта (количество уже учтено)
        quantity:
          type: integer
          description: Количество заказанных пицц
          minimum: 1
        size:
          type: string
          description: Размер пиццы (small, medium, large)
          minimum: 0
        dough:
          type: string
          description: Тип теста пиццы (thin, classic)
          minimum: 0
      required:
        - id
        - pizza_id
        - pizza_name
        - total_price
        - quantity
        - size
        - dough

    # Схема данных о пицце
    PizzaPost:
      type: object
      properties:
        name:
          type: string
          description: Название пиццы
        description:
          type: string
          description: Описание пиццы
        price:
          type: number
          format: float
          description: Цена пиццы
      required:
        - name
        - price
      
    PizzaPut:
      type: object
      properties:
        name:
          type: string
          description: Название пиццы
        description:
          type: string
          description: Описание пиццы
        price:
          type: number
          format: float
          description: Цена пиццы
    
    PizzaGet:
      allOf:
        - $ref: '#/components/schemas/PizzaPost'
        - type: object
          properties:
            id:
              type: integer
              description: Уникальный ID пиццы

    # Схема регистрационных данных
    UserSignUp:
      type: object
      properties:
        email:
          type: string
          description: Электронная почта пользователя
        password:
          type: string
          description: Пароль от аккаунта пользователя
      required:
        - email
        - password
      
    # Схема данных о пользователе
    UserConfig:
      type: object
      properties:
        firstname:
          type: string
          description: Имя пользователя
        lastname:
          type: string
          description: Фамилия пользователя
        address:
          type: string
          description: Адрес пользователя
        phone:
          type: string
          description: Номер телефона пользователя

    # Схема токена
    Token:
      type: string
  
  # Универсальные ответы от сервера
  responses:
    UnauthorizedError:
      description: Попытка неавторизованного получения данных
  
  # Безопасность
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: server.app.utils.auth.decode_token